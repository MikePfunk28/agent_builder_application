AWSTemplateFormatVersion: '2010-09-09'
Description: 'Agent Builder Platform - User Account Onboarding (Tier 2)'

Parameters:
  PlatformAccountId:
    Type: String
    Description: The AWS Account ID of the Agent Builder Platform
    AllowedPattern: '[0-9]{12}'
    ConstraintDescription: Must be a valid 12-digit AWS Account ID
  
  UserIdentifier:
    Type: String
    Description: Your email or unique identifier (used as External ID for security)
    Default: ''
  
  ProjectName:
    Type: String
    Description: Project name for resource tagging
    Default: 'agent-builder'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Platform Configuration'
        Parameters:
          - PlatformAccountId
          - UserIdentifier
          - ProjectName
    ParameterLabels:
      PlatformAccountId:
        default: 'Platform AWS Account ID'
      UserIdentifier:
        default: 'Your Email or User ID'
      ProjectName:
        default: 'Project Name'

Resources:
  # VPC for agent deployment
  AgentVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc'
        - Key: ManagedBy
          Value: 'CloudFormation'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-igw'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AgentVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AgentVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet'

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AgentVPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-rt'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Group
  AgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-agent-sg'
      GroupDescription: Security group for Agent Builder agents
      VpcId: !Ref AgentVPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-agent-sg'

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ProjectName}-cluster'
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-cluster'

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/${ProjectName}/agents'
      RetentionInDays: 7

  # IAM Role for Fargate Task Execution
  FargateExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-fargate-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-fargate-execution-role'

  # Cross-Account IAM Role
  CrossAccountRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-cross-account-role'
      Description: Allows Agent Builder Platform to deploy agents to this account
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${PlatformAccountId}:root'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref UserIdentifier
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-cross-account-role'

  # Deployment Policy
  DeploymentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-deployment-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ECSPermissions
            Effect: Allow
            Action:
              - ecs:CreateCluster
              - ecs:RegisterTaskDefinition
              - ecs:RunTask
              - ecs:StopTask
              - ecs:DescribeTasks
              - ecs:DescribeTaskDefinition
              - ecs:ListTasks
            Resource: '*'
          
          - Sid: ECRPermissions
            Effect: Allow
            Action:
              - ecr:CreateRepository
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
            Resource: '*'
          
          - Sid: LogsPermissions
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/${ProjectName}/*'
          
          - Sid: IAMPermissions
            Effect: Allow
            Action:
              - iam:CreateRole
              - iam:AttachRolePolicy
              - iam:PassRole
              - iam:GetRole
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-*'
          
          - Sid: VPCPermissions
            Effect: Allow
            Action:
              - ec2:DescribeVpcs
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:CreateSecurityGroup
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:AuthorizeSecurityGroupEgress
            Resource: '*'
          
          - Sid: BedrockPermissions
            Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource: '*'
      Roles:
        - !Ref CrossAccountRole

Outputs:
  RoleArn:
    Description: Cross-account role ARN (paste this in Agent Builder Platform)
    Value: !GetAtt CrossAccountRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-RoleArn'

  ExternalId:
    Description: External ID for security (paste this in Agent Builder Platform)
    Value: !Ref UserIdentifier
    Export:
      Name: !Sub '${AWS::StackName}-ExternalId'

  Region:
    Description: AWS Region
    Value: !Ref AWS::Region
    Export:
      Name: !Sub '${AWS::StackName}-Region'

  ECSClusterName:
    Description: ECS Cluster name for agent deployment
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ECSCluster'

  VPCId:
    Description: VPC ID
    Value: !Ref AgentVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCId'

  SubnetId:
    Description: Public Subnet ID
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub '${AWS::StackName}-SubnetId'

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref AgentSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'

  SetupInstructions:
    Description: Next steps
    Value: 'Copy the RoleArn and ExternalId above and paste them in the Agent Builder Platform settings under "Connect My AWS Account"'
